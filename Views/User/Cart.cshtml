@model IEnumerable<BookHive.Models.CartWithDiscountViewModel>

@{
    ViewData["Title"] = "My Cart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-5">
    <h2 class="text-center mb-5 fw-bold text-white" style="font-family: 'Merriweather', serif; font-size: 2.5rem;">
        <i class="bi bi-cart3 me-2 text-teal-500"></i>My Cart
    </h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show text-center animate__animated animate__fadeIn" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show text-center animate__animated animate__fadeIn" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <p class="text-center text-gray-200 text-sm"><i class="bi bi-cart-x-fill me-2"></i>Your cart is empty.</p>
    }
    else
    {
        <div class="card shadow-lg border-0 rounded-3 animate__animated animate__fadeIn" style="background: #1e293b;">
            <div class="card-header rounded-top-3 text-white py-4" style="background: linear-gradient(90deg, #312e81, #14b8a6);">
                <h3 class="mb-0 fw-semibold text-center"><i class="bi bi-cart-fill me-2"></i>Cart Items</h3>
            </div>
            <div class="card-body p-5">
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4" id="cart-items">
                    @foreach (var item in Model)
                    {
                        var cartItem = item.CartItem;
                        var book = cartItem.Book;
                        <div class="col">
                            <div class="card h-100 shadow-sm border-0 rounded-3" style="background: #2d3748;" data-cart-item="@book.Id">
                                @if (item.OnSaleFlag && item.IsDiscountActive)
                                {
                                    <span class="position-absolute top-0 end-0 bg-red-600 text-white text-xs font-medium px-2 py-1 rounded-start">On Sale</span>
                                }
                                @if (!string.IsNullOrEmpty(book.CoverImageUrl))
                                {
                                    <a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id">
                                        <img src="@book.CoverImageUrl" alt="@book.Title" class="card-img-top rounded-top-3" style="height: 144px; object-fit: cover;" />
                                    </a>
                                }
                                else
                                {
                                    <div class="card-img-top bg-gray-600 d-flex align-items-center justify-content-center rounded-top-3" style="height: 144px;">
                                        <span class="text-gray-400 text-sm"><i class="bi bi-image me-2"></i>No Image</span>
                                    </div>
                                }
                                <div class="card-body p-3 text-white">
                                    <h3 class="card-title text-base fw-semibold mb-1">
                                        <a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id" class="text-white hover:text-teal-400 transition-colors">@book.Title</a>
                                    </h3>
                                    <p class="text-gray-200 text-sm mb-1"><i class="bi bi-person me-2 text-teal-400"></i>by @book.Author</p>
                                    <p class="text-gray-200 text-sm mb-1">
                                        @if (item.IsDiscountActive)
                                        {
                                            <span class="text-decoration-line-through text-gray-500">$@book.Price</span>
                                            <span class="text-green-500 font-medium ms-2">$@item.DiscountedPrice.ToString("F2")</span>
                                        }
                                        else
                                        {
                                            <span><i class="bi bi-currency-dollar me-1 text-teal-400"></i>$@book.Price</span>
                                        }
                                    </p>
                                    <p class="text-gray-200 text-sm mb-1" data-stock="@book.Id"><i class="bi bi-box-seam me-2 text-teal-400"></i>In Stock: @book.Quantity</p>
                                    <p class="text-gray-200 text-sm mb-2" data-total-price="@book.Id"><i class="bi bi-wallet2 me-2 text-teal-400"></i>Total: $@((item.IsDiscountActive ? item.DiscountedPrice : book.Price) * cartItem.Quantity)</p>
                                    <div class="d-flex align-items-center mb-2">
                                        <button onclick="updateQuantity(@book.Id, @cartItem.Quantity - 1, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" class="btn btn-secondary btn-sm rounded-start @(cartItem.Quantity <= 1 ? "opacity-50 cursor-not-allowed" : "")" @(cartItem.Quantity <= 1 ? "disabled" : "")>
                                            <i class="bi bi-dash"></i>
                                        </button>
                                        <input type="number" id="quantity-@book.Id" value="@cartItem.Quantity" min="1" class="form-control text-center border-gray-600 bg-gray-700 text-white" style="width: 60px;" onchange="updateQuantity(@book.Id, this.value, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" />
                                        <button onclick="updateQuantity(@book.Id, @cartItem.Quantity + 1, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" class="btn btn-secondary btn-sm rounded-end" id="increment-@book.Id">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    </div>
                                    <form asp-action="RemoveFromCart" method="post">
                                        <input type="hidden" name="bookId" value="@book.Id" />
                                        <button type="submit" class="w-100 btn btn-danger rounded-pill py-1 shadow-sm hover:bg-red-700 transition-transform duration-300 transform hover:scale-105">
                                            <i class="bi bi-trash-fill me-2"></i>Remove
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="text-center mt-5">
                    <p class="text-gray-200 mb-3 text-lg fw-semibold" id="total-cart-price"><i class="bi bi-wallet2 me-2 text-teal-400"></i>Total Price: $@Model.Sum(c => (c.IsDiscountActive ? c.DiscountedPrice : c.CartItem.Book.Price) * c.CartItem.Quantity)</p>
                    <a asp-action="Checkout" asp-controller="Cart" class="btn btn-teal-500 text-white rounded-pill px-4 py-2 shadow-lg hover:bg-teal-600 transition-transform duration-300 transform hover:scale-105">
                        <i class="bi bi-cart-check-fill me-2"></i>Proceed to Checkout
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        let cartItems = @Html.Raw(Json.Serialize(Model.Select(c => new { bookId = c.CartItem.Book.Id, quantity = c.CartItem.Quantity, price = c.IsDiscountActive ? c.DiscountedPrice : c.CartItem.Book.Price, stock = c.CartItem.Book.Quantity })));

        async function fetchStock(bookId) {
            try {
                const response = await fetch(`@Url.Action("GetBookStock", "Books")?bookId=${bookId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch stock');
                }
                const data = await response.json();
                return data.stock;
            } catch (error) {
                console.error('Error fetching stock:', error);
                let item = cartItems.find(i => i.bookId === bookId);
                return item ? item.stock : 0;
            }
        }

        async function fetchCartItem(bookId) {
            try {
                const response = await fetch(`@Url.Action("GetCartItem", "Cart")?bookId=${bookId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch cart item');
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching cart item:', error);
                return null;
            }
        }

        async function updateQuantity(bookId, newQuantity, price) {
            // Fetch the latest cart item data
            const cartItemData = await fetchCartItem(bookId);
            if (!cartItemData || !cartItemData.exists) {
                alert('Book not in your cart.');
                // Remove the item from the UI
                const itemElement = document.querySelector(`[data-cart-item="${bookId}"]`);
                if (itemElement) {
                    itemElement.remove();
                }
                // Update total cart price
                cartItems = cartItems.filter(item => item.bookId !== bookId);
                let totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;
                return;
            }

            // Fetch the latest stock
            const maxQuantity = await fetchStock(bookId);

            // Update stock display
            document.querySelector(`[data-stock="${bookId}"]`).textContent = `In Stock: ${maxQuantity}`;

            // Update cart items array with new stock
            let item = cartItems.find(i => i.bookId === bookId);
            if (item) {
                item.stock = maxQuantity;
            }

            // Validate quantity
            if (newQuantity < 1) {
                newQuantity = 1;
            }
            if (newQuantity > maxQuantity) {
                newQuantity = maxQuantity;
                alert(`Only ${maxQuantity} copies of this book are available.`);
            }

            // Update UI immediately
            document.getElementById(`quantity-${bookId}`).value = newQuantity;
            document.querySelector(`[data-total-price="${bookId}"]`).textContent = `Total: $${(price * newQuantity).toFixed(2)}`;

            // Update increment button state
            const incrementButton = document.getElementById(`increment-${bookId}`);
            if (newQuantity >= maxQuantity) {
                incrementButton.classList.add('opacity-50', 'cursor-not-allowed');
                incrementButton.setAttribute('disabled', 'disabled');
            } else {
                incrementButton.classList.remove('opacity-50', 'cursor-not-allowed');
                incrementButton.removeAttribute('disabled');
            }

            // Update cart items array
            if (item) {
                item.quantity = newQuantity;
            }

            // Update total cart price
            let totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;

            // Send AJAX request to update server
            fetch('@Url.Action("UpdateCartQuantity", "Cart")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ bookId: bookId, quantity: newQuantity })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    alert(data.message);
                    // Revert UI if server validation fails
                    let originalItem = cartItems.find(i => i.bookId === bookId);
                    let originalQuantity = originalItem ? originalItem.quantity : 1;
                    document.getElementById(`quantity-${bookId}`).value = originalQuantity;
                    document.querySelector(`[data-total-price="${bookId}"]`).textContent = `Total: $${(price * originalQuantity).toFixed(2)}`;
                    totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                    document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;
                }
            })
            .catch(error => {
                console.error('Error updating quantity:', error);
                alert('Failed to update quantity. Please try again.');
            });
        }
    </script>
    <style>
        .btn-teal-500 {
            background-color: #14b8a6;
        }

            .btn-teal-500:hover {
                background-color: #15d1bb;
            }

        .text-teal-400 {
            color: #2dd4bf;
        }

        .text-teal-500 {
            color: #14b8a6;
        }

        .animate__fadeIn {
            animation-duration: 1s;
        }
    </style>
}